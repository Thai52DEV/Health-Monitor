#include <Wire.h>
#include "MAX30100_PulseOximeter.h"
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Fonts/FreeSerif9pt7b.h>
#include <Ticker.h>
#include <Adafruit_MLX90614.h>

#include <Fuzzy.h>
#include <FuzzyInput.h>
#include <FuzzyOutput.h>
#include <FuzzySet.h>
#include <FuzzyRule.h>
#include <FuzzyRuleAntecedent.h>
#include <FuzzyRuleConsequent.h>

Fuzzy* fuzzy = new Fuzzy();

// WiFi and Google Script Configuration
const char* host = "script.google.com";
const int httpsPort = 443;
String GAS_ID = "AKfycbxMVGChe7KjPunVqQMMm0cUddcctayh-A_llRKfDET5Rexkecd5XK0lPe9QPf8xfCRZ";
WiFiClientSecure client;
char ssid[] = "Hao";     // Your WiFi SSID
char pass[] = "999999999";        // Your WiFi password


#define SDA_PIN 21
#define SCL_PIN 22

// Display Configuration
Adafruit_SSD1306 display(128, 32, &Wire, -1);
PulseOximeter pox;

// #define MLX_ADDR 0x5A

Adafruit_MLX90614 mlx = Adafruit_MLX90614();
Ticker timer;

int hr; // Heart rate
int sp; // SpO2
float tp; // Temperature
String st;
unsigned long timeS = millis();
unsigned long timeS1 = millis();





void setup() {
  Serial.begin(19200);

  Wire.begin(SDA_PIN, SCL_PIN);
  //Wire.begin();
  delay(1000);
  Serial.println("Quét I2C...");

  for (uint8_t address = 1; address < 127; address++) {
    Wire.beginTransmission(address);
    if (Wire.endTransmission() == 0) {
      Serial.print("Tìm thấy thiết bị I2C tại địa chỉ: 0x");
      Serial.println(address, HEX);
      delay(10);
    }
  }
  Serial.println("Quét xong.");
  // Khởi động màn hình OLED
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {  
    Serial.println("SSD1306 allocation failed");
    for(;;);
  }
  display.setFont();            // Sử dụng font mặc định
  display.setTextSize(1); 
  display.clearDisplay();
  display.setTextSize(1);             
  display.setTextColor(WHITE);        
  display.setCursor(0, 12);             
  display.println("Welcome");
  display.setCursor(0, 22);             
  display.println("Health Sensor");            
  display.display();
  // delay(2000); 

  // Kết nối Wi-Fi
  Serial.println("Connecting to Wi-Fi...");
  WiFi.begin(ssid, pass);
  
  display.clearDisplay();
  display.setCursor(0, 20);
  display.println("Connecting...");
  display.display();

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\nWi-Fi connected");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
  //client.setInsecure();

  //Khởi động cảm biến đo nhịp tim
  if (!pox.begin()) {
    Serial.println("FAILED");
    for(;;);
  } else {
    Serial.println("SUCCESS");
    //client.setInsecure();
  }

  pox.setIRLedCurrent(MAX30100_LED_CURR_7_6MA);
  pox.setOnBeatDetectedCallback(onBeatDetected);
// Khởi động cảm biến MLX90614
  delay(1000);

  if (!mlx.begin()) {
    Serial.println("Không tìm thấy cảm biến MLX90614");
    display.clearDisplay();
    display.setCursor(0, 10);
    display.println("MLX90614 ERROR");
    display.display();
    while (1); // Dừng nếu không có cảm biến
  }
  delay(200);
  // startMAX30100();

  // Khởi tạo timer
  timer.attach_ms(100, update);
  client.setInsecure();

  FuzzyInput* heartRate = new FuzzyInput(1);
  FuzzyInput* spo2 = new FuzzyInput(2);
  FuzzyInput* temperature = new FuzzyInput(3);
  FuzzyOutput* healthStatus = new FuzzyOutput(1);

FuzzySet* hrLow = new FuzzySet(30, 40, 60, 70);
FuzzySet* hrNormal = new FuzzySet(60, 75, 90, 100);
FuzzySet* hrHigh = new FuzzySet(90, 110, 160, 170);
heartRate->addFuzzySet(hrLow);
heartRate->addFuzzySet(hrNormal);
heartRate->addFuzzySet(hrHigh);
fuzzy->addFuzzyInput(heartRate);

// SpO2
FuzzySet* spo2Low = new FuzzySet(70, 75, 85, 90);
FuzzySet* spo2Medium = new FuzzySet(89, 91, 93, 95);
FuzzySet* spo2High = new FuzzySet(94, 96, 99, 100);
spo2->addFuzzySet(spo2Low);
spo2->addFuzzySet(spo2Medium);
spo2->addFuzzySet(spo2High);
fuzzy->addFuzzyInput(spo2);

// Temperature
FuzzySet* tempLow = new FuzzySet(33, 34, 35, 36);
FuzzySet* tempNormal = new FuzzySet(35.5, 36.5, 37, 37.5);
FuzzySet* tempHigh = new FuzzySet(37, 38, 39, 40);
temperature->addFuzzySet(tempLow);
temperature->addFuzzySet(tempNormal);
temperature->addFuzzySet(tempHigh);
fuzzy->addFuzzyInput(temperature);

FuzzySet* weak = new FuzzySet(0, 0, 10, 25);
FuzzySet* prettyWeak = new FuzzySet(20, 30, 40, 50);
FuzzySet* normal = new FuzzySet(45, 50, 55, 60);
FuzzySet* prettyGood = new FuzzySet(55, 70, 80, 90);
FuzzySet* good = new FuzzySet(85, 90, 100, 100);
healthStatus->addFuzzySet(weak);
healthStatus->addFuzzySet(prettyWeak);
healthStatus->addFuzzySet(normal);
healthStatus->addFuzzySet(prettyGood);
healthStatus->addFuzzySet(good);
fuzzy->addFuzzyOutput(healthStatus);

//add rule
addRule(hrLow, spo2Low, tempLow, weak);
addRule(hrLow, spo2Low, tempNormal, weak);
addRule(hrLow, spo2Low, tempHigh, weak);

addRule(hrLow, spo2Medium, tempLow, prettyWeak);
addRule(hrLow, spo2Medium, tempNormal, prettyWeak);
addRule(hrLow, spo2Medium, tempHigh, weak);

addRule(hrLow, spo2High, tempLow, normal);
addRule(hrLow, spo2High, tempNormal, normal);
addRule(hrLow, spo2High, tempHigh, prettyWeak);

addRule(hrNormal, spo2Low, tempLow, prettyWeak);
addRule(hrNormal, spo2Low, tempNormal, prettyWeak);
addRule(hrNormal, spo2Low, tempHigh, weak);

addRule(hrNormal, spo2Medium, tempLow, normal);
addRule(hrNormal, spo2Medium, tempNormal, normal);
addRule(hrNormal, spo2Medium, tempHigh, prettyWeak);

addRule(hrNormal, spo2High, tempLow, good);
addRule(hrNormal, spo2High, tempNormal, good);
addRule(hrNormal, spo2High, tempHigh, normal);

addRule(hrHigh, spo2Low, tempLow, prettyWeak);
addRule(hrHigh, spo2Low, tempNormal, weak);
addRule(hrHigh, spo2Low, tempHigh, prettyWeak);

addRule(hrHigh, spo2Medium, tempLow, normal);
addRule(hrHigh, spo2Medium, tempNormal, prettyWeak);
addRule(hrHigh, spo2Medium, tempHigh, weak);

addRule(hrHigh, spo2High, tempLow, good);
addRule(hrHigh, spo2High, tempNormal, good);
addRule(hrHigh, spo2High, tempHigh, normal);

}


void addRule(FuzzySet* hrSet, FuzzySet* spSet, FuzzySet* tempSet, FuzzySet* outputSet) {
  FuzzyRuleAntecedent* antecedent = new FuzzyRuleAntecedent();

  FuzzyRuleAntecedent* firstAND = new FuzzyRuleAntecedent();
  firstAND->joinWithAND(hrSet, spSet);  // heartRate AND SpO2

  antecedent->joinWithAND(firstAND, tempSet); // AND temp

  FuzzyRuleConsequent* consequent = new FuzzyRuleConsequent();
  consequent->addOutput(outputSet);

  static int ruleNum = 1;
  FuzzyRule* rule = new FuzzyRule(ruleNum++, antecedent, consequent);
  fuzzy->addFuzzyRule(rule);
}
int beatCount = 0; // Đếm số lần nhận tín hiệu từ cảm biến

void loop() {
  // Cập nhật nhịp tim và SpO2 và Nhiệt độ mỗi giây
  if (millis() - timeS > 1000) {
    int heartRate = pox.getHeartRate();
    int SpO2 = pox.getSpO2();
    float temp = mlx.readObjectTempC();
        
    fuzzy->setInput(1, heartRate);
    fuzzy->setInput(2, SpO2 );
    fuzzy->setInput(3, temp);
    fuzzy->fuzzify();

    float healthScore = fuzzy->defuzzify(1);  

    hr = heartRate;
    sp = SpO2;
    tp = temp;
    
    display.clearDisplay(); 


    display.setCursor(0, 0);  
    display.print("HR: ");
    display.print(heartRate); 
    display.println(" bpm");

    display.setCursor(0, 10);
    display.print("SpO2: ");
    display.print(SpO2);
    display.println(" %");

    display.setCursor(0, 20);
    display.print("Temp: ");

    if (!isnan(temp)) {
      display.print(temp);
    } else {
      display.print(0);
    }
    display.println(" C");

    Serial.print("HR: ");
    Serial.print(heartRate); 
    Serial.print(" bpm | ");

    Serial.print("SpO2: ");
    Serial.print(SpO2);
    Serial.print(" % | ");

    Serial.print("Temp: ");
    Serial.print(temp);
    Serial.print(" C | ");

    String status;
    if (healthScore < 25) status = "Weak";
    else if (healthScore < 50) status = "PrettyWeak";
    else if (healthScore < 60) status = "Normal";
    else if (healthScore < 85) status = "PrettyGood";
    else status = "Good";

    st = status;

    display.setCursor(65, 0);
    display.println(status);
    Serial.println(status);
    display.display();
    // Tăng số lần tín hiệu nhận được
    beatCount++;

    // Khi đạt 5 tín hiệu, gọi hàm upData
    if (beatCount >= 10) {
      upData();           // Gửi dữ liệu lên Google Sheets
      resetMAX30100();
      beatCount = 0;      // Đặt lại bộ đếm
    }

    timeS = millis(); // Cập nhật thời gian
  }
    pox.update();
  // delay(1100);
}

void resetMAX30100() {
  if (!pox.begin()) {
    Serial.println("Failed to restart sensor MAX30100.");
    display.clearDisplay();
    display.setCursor(10, 15);
    display.println("Sensor Error");
    display.display();
    for (;;); // Dừng chương trình nếu không khởi động lại được
  }

  // Cấu hình lại LED
  pox.setIRLedCurrent(MAX30100_LED_CURR_7_6MA);
  pox.setOnBeatDetectedCallback(onBeatDetected);
  Serial.println("Sensor reset complete.");
}

// Send data to Google Sheets
void upData() {
  Serial.println("Connecting to Google Sheets...");

  if (!client.connect(host, httpsPort)) {
    Serial.println("Connection to Google Sheets failed.");
    return;
  }

  // Create URL for sending data
  String Send_Data_URL = "sts=write";

  Send_Data_URL += "&hr=" + String(hr);
  Send_Data_URL += "&sp=" + String(sp);
  Send_Data_URL += "&tp=" + String(tp);
    Send_Data_URL += "&st=" + String(st);
  String url = "/macros/s/" + GAS_ID + "/exec?" + Send_Data_URL;
  Serial.println("Request URL: " + url);

  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "Connection: close\r\n\r\n");

  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r") break;
  }
  Serial.println("Data sent to Google Sheets successfully.");
}

// Update sensor readings
void update() {
  pox.update();
}

// Callback for beat detection
void onBeatDetected() {
  Serial.println("Beat detected!");
}
